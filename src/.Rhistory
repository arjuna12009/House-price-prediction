combined <- df
str(combined)
library(Amelia)
misscounts <- sapply(combined,function(x) sum(is.na(x)))
missmap(combined, main = "Missing values")
sort(colSums(sapply(combined, is.na)), decreasing = T)
table(is.na(combined$PoolQC))
table(combined$PoolArea, combined$PoolQC, useNA = 'ifany')
library(plyr)
combined[combined$PoolArea==0,]$PoolQC <- "None"
# convert all NA's in PoolQC to none except for the 3 actual missing values.
combined[is.na(combined$PoolQC),c("OverallQual","PoolArea")]
# imputing the values of poolQC according to overall quality and pool area.
combined[is.na(combined$PoolQC),"PoolQC"] <- c("TA","Gd","TA")
# label encoding as the values are ordinal.
encoding_levels <- c('None', 'Po' , 'Fa', 'TA' , 'Gd', 'Ex' )
combined$PoolQC <- factor(combined$PoolQC, order = TRUE, levels = encoding_levels)
table(combined$PoolQC)
str(combined$PoolQC)
table(combined$MiscFeature, useNA = "ifany")
library(ggplot2)
# convert all NA's in MiscFeature to none.
combined[is.na(combined$MiscFeature),"MiscFeature"] <- "None"
# convert to factor
combined$MiscFeature <- as.factor(combined$MiscFeature)
ggplot(combined, aes(x=MiscFeature, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Alley, useNA = "ifany")
# convert all NA's in Alley to none.
combined[is.na(combined$Alley),"Alley"] <- "None"
# convert to factor
combined$Alley <- as.factor(combined$Alley)
ggplot(combined, aes(x=Alley, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Fence, useNA = "ifany")
# convert all NA's in Fence to none.
combined[is.na(combined$Fence),"Fence"] <- "None"
# convert to factor
combined$Fence <- as.factor(combined$Fence)
ggplot(combined, aes(x=Fence, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$FireplaceQu, useNA = "ifany")
# convert all NA's in FireplaceQu to none.
combined[is.na(combined$FireplaceQu),"FireplaceQu"] <- "None"
# Changing and converting to factor levels from character.
combined$FireplaceQu <- factor(combined$FireplaceQu, order = TRUE, levels = encoding_levels)
table(combined$FireplaceQu, useNA = "ifany")
str(combined$FireplaceQu)
anyNA(combined$FireplaceQu)
table(is.na(combined$LotFrontage))
# predictors that lotfrontage variable might depend on.
predictors <- c("MSSubClass", "MSZoning", "LotFrontage", "LotArea", "Street", "Alley", "LotShape", "LandContour", "LotConfig", "LandSlope", "BldgType", "HouseStyle", "YrSold", "SaleType", "SaleCondition")
library(rpart)
mod <- rpart(LotFrontage~., data = combined[!is.na(combined$LotFrontage),predictors], method = "anova", na.action = na.omit)
pred <- predict(mod, combined[is.na(combined$LotFrontage),predictors])
pred <- round(pred)
combined$LotFrontage[is.na(combined$LotFrontage)] <- pred
anyNA(combined$LotFrontage)
table(combined$LotShape, useNA = "ifany")
combined$LotShape <- factor(combined$LotShape, order = TRUE, levels = c("IR3" , "IR2" , "IR1" , "Reg" ))
table(combined$LotConfig, useNA = "ifany")
combined$LotConfig <- as.factor(combined$LotConfig)
sort(colSums(sapply(combined, is.na)), decreasing = T)
garage <- c("GarageYrBlt","GarageType","GarageFinish","GarageQual","GarageCond","GarageCars","GarageArea")
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
combined$GarageYrBlt[is.na(combined$GarageYrBlt)] <- combined$YearBuilt[is.na(combined$GarageYrBlt)]
combined$GarageType[is.na(combined$GarageType)] <- "None"
combined$GarageFinish[is.na(combined$GarageFinish)] <- "None"
combined$GarageCond[is.na(combined$GarageCond)] <- "None"
combined$GarageQual[is.na(combined$GarageQual)] <- "None"
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
# convert into factor
combined$GarageType <- as.factor(combined$GarageType)
table(combined$GarageType)
# convert into ordinal
Finish <- c('None', 'Unf', 'RFn', 'Fin')
combined$GarageFinish<-factor(combined$GarageFinish, order = TRUE, levels = Finish)
table(combined$GarageFinish, useNA = 'ifany')
combined$GarageCond<-factor(combined$GarageCond, order = TRUE, levels = encoding_levels)
table(combined$GarageCond, useNA = "ifany")
combined$GarageQual<-factor(combined$GarageQual, order = TRUE, levels = encoding_levels)
table(combined$GarageQual, useNA = "ifany")
basement <- c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","BsmtFullBath","BsmtHalfBath","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
x <- which(!is.na(combined$BsmtFinType1) & (is.na(combined$BsmtCond)|is.na(combined$BsmtExposure)|is.na(combined$BsmtQual)|is.na(combined$BsmtFinType2)))
combined[x,basement]
# impute mode
combined[c(949),"BsmtExposure"] <- names(sort(-table(combined$BsmtExposure)))[1]
combined[c(333),"BsmtFinType2"] <- names(sort(-table(combined$BsmtFinType2)))[1]
combined[x,basement]
anyNA(combined[x,basement])
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
combined[is.na(combined[,"TotalBsmtSF"]),basement]
combined[is.na(combined[,"BsmtHalfBath"]),basement]
combined$BsmtQual[is.na(combined$BsmtQual)] <- "None"
combined$BsmtCond[is.na(combined$BsmtCond)] <- "None"
combined$BsmtExposure[is.na(combined$BsmtExposure)] <- "None"
combined$BsmtFinType1[is.na(combined$BsmtFinType1)] <- "None"
combined$BsmtFinType2[is.na(combined$BsmtFinType2)] <- "None"
combined$BsmtFullBath[is.na(combined$BsmtFullBath)] <- 0
combined$BsmtHalfBath[is.na(combined$BsmtHalfBath)] <- 0
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
#install.packages(c("Amelia","purrr","tidyr","ggplot2","rpart","plyr"))
df <- read.table("../data/raw/train.csv", sep = ",",header = T)
head(df)
combined <- df
str(combined)
library(Amelia)
misscounts <- sapply(combined,function(x) sum(is.na(x)))
missmap(combined, main = "Missing values")
sort(colSums(sapply(combined, is.na)), decreasing = T)
table(is.na(combined$PoolQC))
table(combined$PoolArea, combined$PoolQC, useNA = 'ifany')
library(plyr)
combined[combined$PoolArea==0,]$PoolQC <- "None"
# convert all NA's in PoolQC to none except for the 3 actual missing values.
combined[is.na(combined$PoolQC),c("OverallQual","PoolArea")]
# imputing the values of poolQC according to overall quality and pool area.
combined[is.na(combined$PoolQC),"PoolQC"] <- c("TA","Gd","TA")
# label encoding as the values are ordinal.
encoding_levels <- c('None', 'Po' , 'Fa', 'TA' , 'Gd', 'Ex' )
combined$PoolQC <- factor(combined$PoolQC, order = TRUE, levels = encoding_levels)
table(combined$PoolQC)
str(combined$PoolQC)
table(combined$MiscFeature, useNA = "ifany")
library(ggplot2)
# convert all NA's in MiscFeature to none.
combined[is.na(combined$MiscFeature),"MiscFeature"] <- "None"
# convert to factor
combined$MiscFeature <- as.factor(combined$MiscFeature)
ggplot(combined, aes(x=MiscFeature, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Alley, useNA = "ifany")
# convert all NA's in Alley to none.
combined[is.na(combined$Alley),"Alley"] <- "None"
# convert to factor
combined$Alley <- as.factor(combined$Alley)
ggplot(combined, aes(x=Alley, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Fence, useNA = "ifany")
# convert all NA's in Fence to none.
combined[is.na(combined$Fence),"Fence"] <- "None"
# convert to factor
combined$Fence <- as.factor(combined$Fence)
ggplot(combined, aes(x=Fence, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$FireplaceQu, useNA = "ifany")
# convert all NA's in FireplaceQu to none.
combined[is.na(combined$FireplaceQu),"FireplaceQu"] <- "None"
# Changing and converting to factor levels from character.
combined$FireplaceQu <- factor(combined$FireplaceQu, order = TRUE, levels = encoding_levels)
table(combined$FireplaceQu, useNA = "ifany")
str(combined$FireplaceQu)
anyNA(combined$FireplaceQu)
table(is.na(combined$LotFrontage))
# predictors that lotfrontage variable might depend on.
predictors <- c("MSSubClass", "MSZoning", "LotFrontage", "LotArea", "Street", "Alley", "LotShape", "LandContour", "LotConfig", "LandSlope", "BldgType", "HouseStyle", "YrSold", "SaleType", "SaleCondition")
library(rpart)
mod <- rpart(LotFrontage~., data = combined[!is.na(combined$LotFrontage),predictors], method = "anova", na.action = na.omit)
pred <- predict(mod, combined[is.na(combined$LotFrontage),predictors])
pred <- round(pred)
combined$LotFrontage[is.na(combined$LotFrontage)] <- pred
anyNA(combined$LotFrontage)
table(combined$LotShape, useNA = "ifany")
combined$LotShape <- factor(combined$LotShape, order = TRUE, levels = c("IR3" , "IR2" , "IR1" , "Reg" ))
table(combined$LotConfig, useNA = "ifany")
combined$LotConfig <- as.factor(combined$LotConfig)
sort(colSums(sapply(combined, is.na)), decreasing = T)
garage <- c("GarageYrBlt","GarageType","GarageFinish","GarageQual","GarageCond","GarageCars","GarageArea")
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
combined$GarageYrBlt[is.na(combined$GarageYrBlt)] <- combined$YearBuilt[is.na(combined$GarageYrBlt)]
combined$GarageType[is.na(combined$GarageType)] <- "None"
combined$GarageFinish[is.na(combined$GarageFinish)] <- "None"
combined$GarageCond[is.na(combined$GarageCond)] <- "None"
combined$GarageQual[is.na(combined$GarageQual)] <- "None"
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
# convert into factor
combined$GarageType <- as.factor(combined$GarageType)
table(combined$GarageType)
# convert into ordinal
Finish <- c('None', 'Unf', 'RFn', 'Fin')
combined$GarageFinish<-factor(combined$GarageFinish, order = TRUE, levels = Finish)
table(combined$GarageFinish, useNA = 'ifany')
combined$GarageCond<-factor(combined$GarageCond, order = TRUE, levels = encoding_levels)
table(combined$GarageCond, useNA = "ifany")
combined$GarageQual<-factor(combined$GarageQual, order = TRUE, levels = encoding_levels)
table(combined$GarageQual, useNA = "ifany")
basement <- c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","BsmtFullBath","BsmtHalfBath","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
x <- which(!is.na(combined$BsmtFinType1) & (is.na(combined$BsmtCond)|is.na(combined$BsmtExposure)|is.na(combined$BsmtQual)|is.na(combined$BsmtFinType2)))
combined[x,basement]
# impute mode
combined[c(949),"BsmtExposure"] <- names(sort(-table(combined$BsmtExposure)))[1]
combined[c(333),"BsmtFinType2"] <- names(sort(-table(combined$BsmtFinType2)))[1]
combined[x,basement]
anyNA(combined[x,basement])
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
combined$BsmtQual[is.na(combined$BsmtQual)] <- "None"
combined$BsmtCond[is.na(combined$BsmtCond)] <- "None"
combined$BsmtExposure[is.na(combined$BsmtExposure)] <- "None"
combined$BsmtFinType1[is.na(combined$BsmtFinType1)] <- "None"
combined$BsmtFinType2[is.na(combined$BsmtFinType2)] <- "None"
combined$BsmtFullBath[is.na(combined$BsmtFullBath)] <- 0
combined$BsmtHalfBath[is.na(combined$BsmtHalfBath)] <- 0
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
# convert to ordinal
combined$BsmtQual<-factor(combined$BsmtQual, order = TRUE, levels = encoding_levels)
table(combined$BsmtQual, useNA = "ifany")
combined$BsmtCond<-factor(combined$BsmtCond, order = TRUE, levels = encoding_levels)
table(combined$BsmtCond, useNA = "ifany")
exposure <- c('None','No','Mn','Av','Gd')
combined$BsmtExposure<-factor(combined$BsmtExposure, order = TRUE, levels = exposure)
table(combined$BsmtExposure, useNA = "ifany")
rating <- c('None','Unf','LwQ','Rec','BLQ','ALQ','GLQ')
combined$BsmtFinType1<-factor(combined$BsmtFinType1, order = TRUE, levels = rating)
table(combined$BsmtFinType1, useNA = "ifany")
combined$BsmtFinType2<-factor(combined$BsmtFinType2, order = TRUE, levels = rating)
table(combined$BsmtFinType2, useNA = "ifany")
combined$BsmtFullBath
#install.packages(c("Amelia","purrr","tidyr","ggplot2","rpart","plyr"))
df <- read.table("../data/raw/train.csv", sep = ",",header = T)
head(df)
combined <- df
str(combined)
library(Amelia)
misscounts <- sapply(combined,function(x) sum(is.na(x)))
missmap(combined, main = "Missing values")
sort(colSums(sapply(combined, is.na)), decreasing = T)
table(is.na(combined$PoolQC))
table(combined$PoolArea, combined$PoolQC, useNA = 'ifany')
library(plyr)
combined[combined$PoolArea==0,]$PoolQC <- "None"
# convert all NA's in PoolQC to none except for the 3 actual missing values.
combined[is.na(combined$PoolQC),c("OverallQual","PoolArea")]
# imputing the values of poolQC according to overall quality and pool area.
combined[is.na(combined$PoolQC),"PoolQC"] <- c("TA","Gd","TA")
# label encoding as the values are ordinal.
encoding_levels <- c('None', 'Po' , 'Fa', 'TA' , 'Gd', 'Ex' )
combined$PoolQC <- factor(combined$PoolQC, order = TRUE, levels = encoding_levels)
table(combined$PoolQC)
str(combined$PoolQC)
table(combined$MiscFeature, useNA = "ifany")
library(ggplot2)
# convert all NA's in MiscFeature to none.
combined[is.na(combined$MiscFeature),"MiscFeature"] <- "None"
# convert to factor
combined$MiscFeature <- as.factor(combined$MiscFeature)
ggplot(combined, aes(x=MiscFeature, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Alley, useNA = "ifany")
# convert all NA's in Alley to none.
combined[is.na(combined$Alley),"Alley"] <- "None"
# convert to factor
combined$Alley <- as.factor(combined$Alley)
ggplot(combined, aes(x=Alley, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$Fence, useNA = "ifany")
# convert all NA's in Fence to none.
combined[is.na(combined$Fence),"Fence"] <- "None"
# convert to factor
combined$Fence <- as.factor(combined$Fence)
ggplot(combined, aes(x=Fence, y = SalePrice)) + geom_bar(stat = 'summary')
table(combined$FireplaceQu, useNA = "ifany")
# convert all NA's in FireplaceQu to none.
combined[is.na(combined$FireplaceQu),"FireplaceQu"] <- "None"
# Changing and converting to factor levels from character.
combined$FireplaceQu <- factor(combined$FireplaceQu, order = TRUE, levels = encoding_levels)
table(combined$FireplaceQu, useNA = "ifany")
str(combined$FireplaceQu)
anyNA(combined$FireplaceQu)
table(is.na(combined$LotFrontage))
# predictors that lotfrontage variable might depend on.
predictors <- c("MSSubClass", "MSZoning", "LotFrontage", "LotArea", "Street", "Alley", "LotShape", "LandContour", "LotConfig", "LandSlope", "BldgType", "HouseStyle", "YrSold", "SaleType", "SaleCondition")
library(rpart)
mod <- rpart(LotFrontage~., data = combined[!is.na(combined$LotFrontage),predictors], method = "anova", na.action = na.omit)
pred <- predict(mod, combined[is.na(combined$LotFrontage),predictors])
pred <- round(pred)
combined$LotFrontage[is.na(combined$LotFrontage)] <- pred
anyNA(combined$LotFrontage)
table(combined$LotShape, useNA = "ifany")
combined$LotShape <- factor(combined$LotShape, order = TRUE, levels = c("IR3" , "IR2" , "IR1" , "Reg" ))
table(combined$LotConfig, useNA = "ifany")
combined$LotConfig <- as.factor(combined$LotConfig)
sort(colSums(sapply(combined, is.na)), decreasing = T)
garage <- c("GarageYrBlt","GarageType","GarageFinish","GarageQual","GarageCond","GarageCars","GarageArea")
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
combined$GarageYrBlt[is.na(combined$GarageYrBlt)] <- combined$YearBuilt[is.na(combined$GarageYrBlt)]
combined$GarageType[is.na(combined$GarageType)] <- "None"
combined$GarageFinish[is.na(combined$GarageFinish)] <- "None"
combined$GarageCond[is.na(combined$GarageCond)] <- "None"
combined$GarageQual[is.na(combined$GarageQual)] <- "None"
sort(colSums(sapply(combined[,garage], is.na)), decreasing = T)
# convert into factor
combined$GarageType <- as.factor(combined$GarageType)
table(combined$GarageType)
# convert into ordinal
Finish <- c('None', 'Unf', 'RFn', 'Fin')
combined$GarageFinish<-factor(combined$GarageFinish, order = TRUE, levels = Finish)
table(combined$GarageFinish, useNA = 'ifany')
combined$GarageCond<-factor(combined$GarageCond, order = TRUE, levels = encoding_levels)
table(combined$GarageCond, useNA = "ifany")
combined$GarageQual<-factor(combined$GarageQual, order = TRUE, levels = encoding_levels)
table(combined$GarageQual, useNA = "ifany")
basement <- c("BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","BsmtFullBath","BsmtHalfBath","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
x <- which(!is.na(combined$BsmtFinType1) & (is.na(combined$BsmtCond)|is.na(combined$BsmtExposure)|is.na(combined$BsmtQual)|is.na(combined$BsmtFinType2)))
combined[x,basement]
# impute mode
combined[c(949),"BsmtExposure"] <- names(sort(-table(combined$BsmtExposure)))[1]
combined[c(333),"BsmtFinType2"] <- names(sort(-table(combined$BsmtFinType2)))[1]
combined[x,basement]
anyNA(combined[x,basement])
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
combined$BsmtQual[is.na(combined$BsmtQual)] <- "None"
combined$BsmtCond[is.na(combined$BsmtCond)] <- "None"
combined$BsmtExposure[is.na(combined$BsmtExposure)] <- "None"
combined$BsmtFinType1[is.na(combined$BsmtFinType1)] <- "None"
combined$BsmtFinType2[is.na(combined$BsmtFinType2)] <- "None"
combined$BsmtFullBath[is.na(combined$BsmtFullBath)] <- 0
combined$BsmtHalfBath[is.na(combined$BsmtHalfBath)] <- 0
sort(colSums(sapply(combined[,basement], is.na)), decreasing = T)
# convert to ordinal
combined$BsmtQual<-factor(combined$BsmtQual, order = TRUE, levels = encoding_levels)
table(combined$BsmtQual, useNA = "ifany")
combined$BsmtCond<-factor(combined$BsmtCond, order = TRUE, levels = encoding_levels)
table(combined$BsmtCond, useNA = "ifany")
exposure <- c('None','No','Mn','Av','Gd')
combined$BsmtExposure<-factor(combined$BsmtExposure, order = TRUE, levels = exposure)
table(combined$BsmtExposure, useNA = "ifany")
rating <- c('None','Unf','LwQ','Rec','BLQ','ALQ','GLQ')
combined$BsmtFinType1<-factor(combined$BsmtFinType1, order = TRUE, levels = rating)
table(combined$BsmtFinType1, useNA = "ifany")
combined$BsmtFinType2<-factor(combined$BsmtFinType2, order = TRUE, levels = rating)
table(combined$BsmtFinType2, useNA = "ifany")
sort(colSums(sapply(combined, is.na)), decreasing = T)
x <- which(!is.na(combined$MasVnrArea) & is.na(combined$MasVnrType) )
combined[x,c("MasVnrArea","MasVnrType")]
combined[x,c("MasVnrArea","MasVnrType")]
sort(colSums(sapply(combined, is.na)), decreasing = T)
sort(colSums(sapply(combined, is.na)), decreasing = T)
combined$MasVnrType[is.na(combined$MasVnrType)] <- "None"
combined$MasVnrArea[is.na(combined$MasVnrArea)] <- 0
combined$MasVnrType <- as.factor(combined$MasVnrType)
table(combined$MasVnrType)
sort(colSums(sapply(combined, is.na)), decreasing = T)
categorical_variables <- c('GarageType',"MSZoning","Utilities","Exterior1st","Exterior2nd","Electrical","SaleType","SaleCondition","Foundation","Heating","CentralAir","RoofStyle","RoofMatl","LandContour","BldgType","HouseStyle","Neighborhood","Condition1","Condition2","Street","MSSubClass","MoSold","YrSold")
table(combined$Electrical, useNA = "ifany")
combined$Electrical[is.na(combined$Electrical)] <-
names(sort(-table(combined$Electrical)))[1]
combined$Electrical <- as.factor(combined$Electrical)
x <- sort(colSums(sapply(combined[,categorical_variables], is.na)), decreasing = T)
x
for(i in 1:length(names(x)))
{
combined[,names(x)[i]] <- as.factor(combined[,names(x)[i]])
}
str(combined[,categorical_variables])
sort(colSums(sapply(combined, is.na)), decreasing = T)
combined[is.na(combined$Functional),"Functional"] <- names(sort(-table(combined$Functional)))[1]
functionality <- c('Sal', 'Sev', 'Maj2', 'Maj1', 'Mod', 'Min2', 'Min1', 'Typ')
combined$Functional <- factor(combined$Functional, order = TRUE, levels = functionality)
combined[is.na(combined$KitchenQual),"KitchenQual"] <- names(sort(-table(combined$KitchenQual)))[1]
combined$KitchenQual <- factor(combined$KitchenQual, order = TRUE, levels = encoding_levels)
sort(colSums(sapply(combined, is.na)), decreasing = T)
char_columns <- names(combined[,sapply(combined, is.character)])
char_columns
# convert remaining character variables into categorical
combined$LandSlope <- factor(combined$LandSlope, order = TRUE, levels = c('Sev','Mod','Gtl'))
combined$ExterQual <- factor(combined$ExterQual, order = TRUE, levels = encoding_levels)
combined$ExterCond <- factor(combined$ExterCond, order = TRUE, levels = encoding_levels)
combined$HeatingQC <- factor(combined$HeatingQC, order = TRUE, levels = encoding_levels)
combined$PavedDrive <- factor(combined$PavedDrive, order = TRUE, levels = c('N','P','Y'))
misscounts <- sapply(combined,function(x) sum(is.na(x)))
missmap(combined, main = "Missing values")
anyNA(combined[,!names(combined) %in% c("SalePrice")])
misscounts <- sapply(combined,function(x) sum(is.na(x)))
missmap(combined, main = "Missing values")
anyNA(combined)
num_vars <- which(sapply(combined,is.numeric))
factor_vars <- which(sapply(combined,is.factor))
cat('numeric variables: ', length(num_vars),' and categorical variables: ',length(factor_vars),'\n')
str(combined)
library(readxl)
data <- read_excel("stocks.xlsx")
data <- as.data.frame(data)
head(data)
stocks <- data[,c(1,2,3,4)]
stocks$float_rotation <- stocks$`PM vol`/stocks$float
plot(stocks$float_rotation,stocks$`%chg`)
abline(v = 0.5)
stocks1 <- stocks[which(stocks$`float_rotation`>0.5),]
stocks2 <- stocks1[stocks1[,2]>50,]
stocks3 <- stocks1[stocks1[,2]<50,]
percent <- nrow(stocks2)/nrow(stocks1)
profit <- (1.5^round(percent * nrow(stocks1),1))*200
loss <- (1.25^round((1-percent) * nrow(stocks1),1))*200
profit
loss
profit - loss
min(stocks2[-18,"float_rotation"])
stocks2
stocks3
stocks[which(stocks$`float_rotation`<0.5),]
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("/Users/kevinmouofo/Downloads/Math-564-project-main/Data/Processed/clean_data.csv",
sep=",", header = TRUE )
setwd("C:/Users/arjun/OneDrive/math 564/Math-564-project/src")
data <- read.csv("../Data/Processed/clean_data.csv",
sep=",", header = TRUE )
str(data)
fit0 <- lm(SalePrice~., data=data[-c(1,2)])
fit.both <- step(fit0, scope=list(lower=~1,upper=~MSZoning + Street + Alley + LotShape + LandContour + Utilities + LotConfig + LandSlope + Neighborhood + Condition1  +  Condition2 +  BldgType + HouseStyle +  RoofStyle + RoofMatl + Exterior1st + Exterior2nd + MasVnrType + ExterQual + ExterCond + Foundation + BsmtQual + BsmtCond + BsmtExposure  + BsmtFinType1 + BsmtFinType2 + Heating + HeatingQC + CentralAir + Electrical + KitchenQual + Functional + FireplaceQu + GarageType + GarageFinish + GarageQual + GarageCond + PavedDrive + PoolQC + Fence + MiscFeature + SaleType + SaleCondition + MSSubClass + LotFrontage+LotArea+OverallQual+OverallCond +YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1+ BsmtFinSF2  +  BsmtUnfSF +  TotalBsmtSF + X1stFlrSF +  X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath + BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd + Fireplaces  + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF + EnclosedPorch + X3SsnPorch + ScreenPorch + PoolArea + MiscVal + MoSold + YrSold), direction = "both")
summary(fit.both)
hist(data[,"PoolQC"],data[,"SalePrice"])
hist(as.numeric(data[,"PoolQC"]),data[,"SalePrice"])
hist(as.numeric(data[,"PoolQC"]),data[,"SalePrice"])
as.numeric(data[,"PoolQC"])
data[,"PoolQC"]
#best<-regsubsets(x=data[,c(1:4)], y=data$SalePrice, nbest=1, nvmax=4, method="exhaustive")
# PoolQC
table(data[, "PoolQC"])
y <- as.character(data[, "PoolQC"])
y <- replace(y, y=='None', values = 0)
y <- replace(y, y=='Fa', values = 1)
y <- replace(y, y=='TA', values = 2)
y <- replace(y, y=='Gd', values = 3)
y <- replace(y, y=='Ex', values = 4)
y <- as.numeric(y)
cor(data[,"SalePrice"], y)
cor(data[,"SalePrice"], y, method = "spearman")
hist(y, data[,"SalePrice"])
histogram(y, data[,"SalePrice"])
head(data)
names(data)
set.seed(2018)
quick_RF <- randomForest(x=data[,"SalePrice"], y=data$SalePrice, ntree=100,importance=TRUE)
install.packages("randomForest")
library(randomForest)
set.seed(2018)
quick_RF <- randomForest(x=data[,"SalePrice"], y=data$SalePrice, ntree=100,importance=TRUE)
data[,-c("SalePrice")]
data[,names(data) %in% c("SalePrice")]
data[,!names(data) %in% c("SalePrice")]
data$SalePrice
library(randomForest)
set.seed(2018)
quick_RF <- randomForest(x=data[,!names(data) %in% c("SalePrice")], y=data$SalePrice, ntree=100,importance=TRUE)
importance(quick_RF)
imp_RF <- importance(quick_RF)
imp_DF <- data.frame(Variables = row.names(imp_RF), MSE = imp_RF[,1])
imp_DF <- imp_DF[order(imp_DF$MSE, decreasing = TRUE),]
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
library(ggplot2)
ggplot(imp_DF[1:20,], aes(x=reorder(Variables, MSE), y=MSE, fill=MSE)) + geom_bar(stat = 'identity') + labs(x = 'Variables', y= '% increase MSE if variable is randomly permuted') + coord_flip() + theme(legend.position="none")
?randomForest
library(randomForest)
library(ggplot2)
set.seed(2018)
rf_model <- randomForest(x = data[,!names(data) %in% c("SalePrice")], y = data$SalePrice, ntree = 500, mtry = 2, importance = TRUE)
rf_model
rf_model <- randomForest(SalePrice~.,data = data, ntree = 500, mtry = 2, importance = TRUE)
rf_model
library(randomForest)
library(ggplot2)
set.seed(2018)
rf_model <- randomForest(SalePrice~.,data = data, ntree = 500, mtry = 2, importance = TRUE)
summary(rf_model)
rf_model
summary(rf_model)
varImpPlot(rf_model)
install.packages("mlr")
library(mlr)
library(mlr)
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier))
?OOBCurve
??OOBCurve
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier), data = data)
OOBCurve(rf_model, measures = list(mmce, auc, brier), task = sonar.task, data = data)
install.packages("ranger")
library(ranger)
library(mlr)
library(ranger)
OOBCurve(rf_model, measures = list(mmce, auc, brier), task = sonar.task, data = data)
install.packages("OOBCurve")
library(OOBCurve)
library(mlr)
library(OOBCurve)
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier), data = data)
library(mlr)
library(OOBCurve)
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier),task = sonar.task, data = data)
list(mmce,auc,brier)
getTaskData(sonar.task)
getTaskData(data)
sonar.task
OOBCurve(rf_model, measures = list(mmce,auc,brier),task = data, data = data)
data2 = getTaskData(sonar.task)
data2
makeClassifTask(data = data2, target = "Class")
sonar.task = makeClassifTask(data = data2, target = "Class")
lrn = makeLearner("classif.ranger", keep.inbag = TRUE, par.vals = list(num.trees = 100))
mod = train(lrn, sonar.task)
OOBCurve(mod, measures = list(mmce,auc,brier),task = sonar.task, data = data2)
library(randomForest)
set.seed(2018)
rf_model <- randomForest(SalePrice~.,data = data, ntree = 500, mtry = 2, importance = TRUE, keep.inbag = TRUE)
rf_model
library(mlr)
library(OOBCurve)
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier),task = data, data = data)
library(mlr)
library(OOBCurve)
result <- OOBCurve(rf_model, measures = list(mmce,auc,brier), data = data)
data = makeClassifTask(data = data, target = "Class")
data = makeClassifTask(data = data, target = "SalePrice")
library(randomForest)
set.seed(2018)
rf_model <- randomForest(SalePrice~.,data = data, ntree = 100, mtry = 2, importance = TRUE)
rf_model
varImpPlot(rf_model)
